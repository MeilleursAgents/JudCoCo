#!/usr/bin/env bash

set -o nounset -o pipefail -o errexit

var_color() {
  export RED='\033[0;31m'
  export GREEN='\033[0;32m'
  export BLUE='\033[0;34m'
  export YELLOW='\033[33m'
  export RESET='\033[0m'
}

git_conventionnal_commits() {
  declare -gA CONVENTIONAL_COMMIT_SCOPES
  CONVENTIONAL_COMMIT_SCOPES['chore']='Changes in the core of the repository'
  CONVENTIONAL_COMMIT_SCOPES['docs']='Documentation only changes'
  CONVENTIONAL_COMMIT_SCOPES['feat']=$(printf 'A new feature for user %b(production change)%b' "${RED}" "${RESET}")
  CONVENTIONAL_COMMIT_SCOPES['fix']=$(printf 'A bug fix for user %b(production change)%b' "${RED}" "${RESET}")
  CONVENTIONAL_COMMIT_SCOPES['refactor']=$(printf 'A change that is not a feature not a bug %b(production change)%b' "${RED}" "${RESET}")
  CONVENTIONAL_COMMIT_SCOPES['style']='A change that do not affect the meaning of the code'
  CONVENTIONAL_COMMIT_SCOPES['test']='A new test or correcting existing tests'
}

git_is_merge_commit() {
  if [[ ${1} =~ Merge\ (pull\ request|branch) ]]; then
    printf "true"
  else
    printf "false"
  fi
}

git_is_commit_wip() {
  if [[ ${1} =~ ^fixup\! ]]; then
    printf "true"
    return
  fi

  local WIP_REGEX="\\bwip\\b"
  if [[ ${OSTYPE} =~ ^darwin ]]; then
    WIP_REGEX="[[:<:]]wip[[:>:]]"
  fi

  if [[ ${1} =~ ${WIP_REGEX} ]]; then
    printf "true"
  else
    printf "false"
  fi
}

git_is_conventional_commit() {
  shopt -s nocasematch
  if [[ ${1} =~ ^(revert:\ )?($(IFS='|'; echo "${!CONVENTIONAL_COMMIT_SCOPES[*]}"))(\(.+\))?\!?:\ [a-zA-Z0-9\[\(\{]+ ]]; then
    printf "true"
  else
    printf "false"
  fi
}

git_is_valid_description() {
  if [[ ${1} =~ ^.{1,${DESCRIPTION_MAX_LENGTH}}$ ]]; then
    printf "true"
  else
    printf "false"
  fi
}

main() {
  var_color
  git_conventionnal_commits

  local DESCRIPTION_MAX_LENGTH="70"

  local BASE="${1:-master}"
  local HEAD="${2:-$(git rev-parse --abbrev-ref HEAD)}"

  local UNCLEAR="false"
  IFS=$'\n'

  printf "%bComparing %b%s%b and %b%s%b\n" "${BLUE}" "${YELLOW}" "${BASE}" "${BLUE}" "${YELLOW}" "${HEAD}" "${RESET}"

  for commit in $(git log --pretty=format:'%s' "${BASE}..${HEAD}"); do
    printf "%bAnalyzing %b%s%b\n" "${BLUE}" "${YELLOW}" "${commit}" "${RESET}"

    if [[ $(git_is_merge_commit "${commit}") == "true" ]]; then
      printf "\t%bmerge commit, ignoring%b\n" "${BLUE}" "${RESET}"
      continue
    fi

    if [[ $(git_is_commit_wip "${commit}") == "true" ]]; then
      printf "\t%bwip commit, please rebase%b\n" "${RED}" "${RESET}"
      UNCLEAR="true"
      continue
    fi

    if [[ $(git_is_conventional_commit "${commit}") != "true" ]]; then
      printf "\t%bnot a conventional commit, please reword according to %bconventionalcommits.org/en/v1.0.0/#specification%b\n" "${RED}" "${GREEN}" "${RESET}"
      UNCLEAR="true"
    fi

    if [[ $(git_is_valid_description "${commit}") != "true" ]]; then
      printf "\t%btoo long, please reword below %d characters, %bcurrently %d%b\n" "${RED}" "${DESCRIPTION_MAX_LENGTH}" "${YELLOW}" "${#commit}" "${RESET}"
      UNCLEAR="true"
    fi
  done

  if [[ ${UNCLEAR} == "true" ]]; then
    exit 1
  fi

  printf "%bâœ” Everything looks fine%b\n" "${GREEN}" "${RESET}"
  exit 0
}

main "${@:-}"
